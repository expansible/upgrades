%YAML 1.1  # roles/upgrades/tasks/main.yml  -*- mode: yaml -*-

# Upgrade packages and set up automatic unattended security upgrades
---
# Install packages dependent on running kernel (before it is replaced)
- name: Update kernel-dependent packages
  apt: pkg={{ item }} state=latest
       update_cache=yes cache_valid_time=3600
  with_items:
  - zram-config
  #- cryptsetup

# Takes advantage of the fact that APT installs latest kernel if all uninstalled
# Also uninstalls unneeded/undesired packages that trigger initramfs rebuild
- name: Replace release kernel with latest version
  apt: pkg={{ item }} state=absent purge=yes
       update_cache=yes cache_valid_time=3600
  with_items:
  - linux-headers-{{ baseversion }}
  - linux-headers-{{ baseversion }}-generic
  - linux-image-{{ baseversion }}-generic
  - linux-image-extra-{{ baseversion }}-generic
  - ntfs-3g

# Update all packages that trigger initramfs rebuild at once
- name: Update boot packages
  apt: pkg={{ item }} state=latest
       update_cache=yes cache_valid_time=3600
  with_items:
  - initramfs-tools
  - dmsetup
  - grub-common
  - libc-bin
  - plymouth
  - udev
  #- cryptsetup

- name: Upgrade APT to the latest packages
  apt: upgrade={{ upgrade }} update_cache=yes cache_valid_time=3600
  # additional tag ('upgrade' instead of 'upgrades') for this slow task
  register: upgrade
  changed_when: "'packages will be upgraded' in upgrade.stdout"
  tags: upgrade
  when: upgrade in ('yes', 'safe', 'full', 'dist')

- name: Install unattended-upgrades
  apt: pkg=unattended-upgrades state=present
  when: unattended

- name: Adjust APT update intervals
  copy: src=apt_periodic dest=/etc/apt/apt.conf.d/10periodic
  when: unattended

- name: Only upgrade ${codename}-security during unattended-upgrades
  lineinfile: dest=/etc/apt/apt.conf.d/50unattended-upgrades state=absent
              regexp="^[^/].*-{{ item }}"
  with_items:
  - updates
  - proposed
  - backports
  when: unattended

# TODO - handle removing linux-headers-$VERSION after apt-get autoclean/remove
